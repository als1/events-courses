{"version":3,"sources":["components/cart.jsx","components/course.jsx","components/lstcourses.jsx","App.js","serviceWorker.js","index.js"],"names":["Cart","props","className","href","totalItems","Course","this","course","id","name","counter","setBadgeClasses","onClick","onIncrement","onDecrement","onDelete","badgeclasses","Component","LstCourses","onClearCounters","style","backgroundColor","color","fontWeight","courses","map","key","App","state","handleAddButton","tempcourses","i","indexOf","setState","handleRemoveButton","handleDeleteButton","courseId","filter","c","handleClearCounters","ct","Fragment","reduce","prev","next","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2bceaeab.chunk.js","sourcesContent":["import React from 'react';\n\nconst Cart = (props) => {\n    return (<nav className=\"navbar navbar-dark bg-dark\">\n    <div className=\"navbar-brand cart-container\" href=\"#\">\n        <span>Total Registered Students: </span>\n        <span className=\"badge badge-pill badge-info\">{props.totalItems}</span>\n    </div>\n</nav>);\n};\n\nexport default Cart;","import React, { Component } from 'react';\n\nclass Course extends Component {\n\n    render() {\n        const { id, name, counter } = this.props.course;\n\n        return (\n        <li className=\"course-container\">\n            <span>{id}.</span> <span>{name}</span>\n            <span className={this.setBadgeClasses()}>{counter}</span>\n            <span><button onClick={ () => this.props.onIncrement(this.props.course) } className=\"btn btn-primary btn-sm m-3\">Add Student</button></span>\n            <span><button onClick={ () => this.props.onDecrement(this.props.course) } className=\"btn btn-primary btn-sm m-3\">Remove Student</button></span>\n            <button onClick={ () => this.props.onDelete(this.props.course.id) } className=\"btn btn-warning btn-sm m-3\">Delete Course</button>\n        </li>\n        );\n    };\n\n    setBadgeClasses() {\n        let badgeclasses = \"badge m-3 badge-pill \";\n        badgeclasses += (this.props.course.counter === 0) ? \"badge-danger\" : \"badge-info\";\n        return badgeclasses;\n    };\n}\n\nexport default Course;","import React, { Component } from 'react';\nimport Course from './course';\n\nclass LstCourses extends Component {\n\n    render() {\n        return (<div>\n            <button className=\"btn btn-primary btn-sm m-3\" onClick={this.props.onClearCounters}>Clear All Registered</button>\n            <ul>\n                <li className=\"course-container\" style={{backgroundColor:\"grey\", color: \"white\", fontWeight:\"bold\"}}>\n                    <span>ID</span> <span>Course Title</span> <span></span> <span></span> <span></span>\n                </li>\n                { this.props.courses.map(course => \n                <Course key={course.id} course={course} onDelete={this.props.onDelete} onIncrement={this.props.onIncrement} onDecrement={this.props.onDecrement} />)\n                }\n            </ul>\n        </div>)\n    }\n}\n\nexport default LstCourses;","import React, { Component } from 'react';\nimport Cart from './components/cart';\nimport LstCourses from './components/lstcourses';\nimport './App.css';\nimport courses from './courses.json';\nimport { tsImportEqualsDeclaration } from '@babel/types';\n\nclass App extends Component {\n  state = {\n    courses: courses\n  };\n\n  handleAddButton = counter => {\n    const tempcourses = [...this.state.courses];\n    const i = tempcourses.indexOf(counter);\n    tempcourses[i] = { ...counter };\n    tempcourses[i].counter++;\n    this.setState({ courses: tempcourses });\n  }\n\n  handleRemoveButton = counter => {\n    if (counter.counter === 0) return;\n    const tempcourses = [...this.state.courses];\n    const i = tempcourses.indexOf(counter);\n    tempcourses[i] = { ...counter };\n    tempcourses[i].counter--;\n    this.setState({ courses: tempcourses });\n  }\n\n  handleDeleteButton = (courseId) => {\n    const tempcourses = this.state.courses.filter(c => c.id !== courseId);\n    this.setState( { courses: tempcourses });\n  }\n\n  handleClearCounters = () => {\n    const tempcourses = this.state.courses.map(ct => {\n        ct.counter = 0;\n        return ct;\n    });\n    this.setState({ courses: tempcourses });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Cart totalItems={this.state.courses.map(i => i.counter).reduce((prev, next) => prev + next) } />\n        <main className=\"container\">\n          <LstCourses courses={this.state.courses} onClearCounters={this.handleClearCounters} onDelete={this.handleDeleteButton} onIncrement={this.handleAddButton} onDecrement={this.handleRemoveButton} />\n        </main>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}